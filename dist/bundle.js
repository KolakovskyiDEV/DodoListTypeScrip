/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

//— Добавить к каждому todo item который создается при сабмите формы поле completed
//— поле completed должно содержать false когда пользователь только что создал todo item
//— Поле completed можно изменить прямо из элемента todo http://joxi.ru/GrqX0JLf4v1Y5A — нужно добавить в него checkbox
//— Если задача не выполнена — нежно чтобы в чекбоксе не было галочки, а если выполнена — чтобы была (сразу после создания todo item галочки нету)
//— Если пользователь нажимает на текущем элементе на галочку то нужно изменять статус текущей задачи на выполненный (completed: true)
//— Так как все todo items у нас хранятся в массиве внутри localStorage то с ним нам и нужно работать
//— Добавить возможность удалять каждый отдельный todo item
//— Добавить возможность удалять сразу все todo items
// // "use strict";
// // //— Добавить к каждому todo item который создается при сабмите формы поле completed
// // //— поле completed должно содержать false когда пользователь только что создал todo item
// // //— Поле completed можно изменить прямо из элемента todo http://joxi.ru/GrqX0JLf4v1Y5A — нужно добавить в него checkbox
// // //— Если задача не выполнена — нежно чтобы в чекбоксе не было галочки, а если выполнена — чтобы была (сразу после создания todo item галочки нету)
// // //— Если пользователь нажимает на текущем элементе на галочку то нужно изменять статус текущей задачи на выполненный (completed: true)
// // //— Так как все todo items у нас хранятся в массиве внутри localStorage то с ним нам и нужно работать
// // //— Добавить возможность удалять каждый отдельный todo item
// // //— Добавить возможность удалять сразу все todo items
var TodoModel = /** @class */ (function () {
    function TodoModel() {
        this.dbName = "saved_data";
        this._countOfIcons = 0;
        // this.dbName = "saved_data";
        // this.num = 0;
    }
    Object.defineProperty(TodoModel.prototype, "countOfIcons", {
        get: function () {
            return this._countOfIcons;
        },
        set: function (numberValue) {
            this._countOfIcons = numberValue;
        },
        enumerable: false,
        configurable: true
    });
    TodoModel.prototype.saveData = function (todoItem) {
        if (localStorage[this.dbName]) {
            var data_1 = JSON.parse(localStorage[this.dbName]);
            data_1.push(todoItem);
            localStorage.setItem(this.dbName, JSON.stringify(data_1));
            return data_1;
        }
        var data = [todoItem];
        localStorage.setItem(this.dbName, JSON.stringify(data));
        return data;
    };
    TodoModel.prototype.getDataModel = function () {
        if (!localStorage.getItem(this.dbName))
            return false;
        return localStorage.getItem(this.dbName);
    };
    TodoModel.prototype.reSetData = function (arr) {
        localStorage.clear();
        localStorage.setItem(this.dbName, JSON.stringify(arr));
    };
    TodoModel.prototype.removeData = function () {
        localStorage.clear();
    };
    return TodoModel;
}());
;
var TodoController = /** @class */ (function () {
    function TodoController() {
    }
    TodoController.prototype.getData = function () {
        if (!modelObject.getDataModel())
            return false;
        return JSON.parse(modelObject.getDataModel());
    };
    TodoController.prototype.setData = function (inputs) {
        var todoItemObject = controlerObject.handleInputs(inputs);
        modelObject.saveData(todoItemObject);
        return todoItemObject;
    };
    TodoController.prototype.handleInputs = function (inputs) {
        var obj = {};
        for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
            var input = inputs_1[_i];
            obj[input.name] = input.value;
        }
        obj.checkbox = false;
        obj.completed = "false";
        return obj;
    };
    TodoController.prototype.makeCheckBox = function (boxCheck) {
        var index = Number(boxCheck.target.parentElement.id);
        var arr = controlerObject.getData();
        arr[index].completed = "true";
        arr[index].checkbox = !arr[index].checkbox;
        modelObject.reSetData(arr);
        return arr;
    };
    TodoController.prototype.deletElem = function (elemDel) {
        var index = Number(elemDel.target.parentElement.id);
        var arr = controlerObject.getData();
        arr.splice(index, 1);
        modelObject.reSetData(arr);
        return arr;
    };
    TodoController.prototype.deletAllElem = function (delAll) {
        modelObject.countOfIcons = 0;
        var arr = controlerObject.getData();
        modelObject.removeData();
        return arr;
    };
    return TodoController;
}());
;
var TodoView = /** @class */ (function () {
    function TodoView() {
        this.form = document.querySelector("#todoForm");
        this.template = document.querySelector("#todoItems");
        this.removeAll = document.querySelector("#todoForm");
    }
    TodoView.prototype.setEvents = function () {
        window.addEventListener("load", viewObject.onLoadFunc);
        this.form.addEventListener("submit", viewObject.formSubmit);
        this.template.addEventListener("change", viewObject.checkBoxFunc);
        this.template.addEventListener("click", viewObject.deletElemFunc);
        this.removeAll.addEventListener("click", viewObject.deletAllFunc);
    };
    TodoView.prototype.formSubmit = function (e) {
        e.preventDefault();
        var inputs = e.target.querySelectorAll("input, textarea");
        for (var _i = 0, inputs_2 = inputs; _i < inputs_2.length; _i++) {
            var input = inputs_2[_i];
            if (!input.value.length)
                return alert("No way you can add this shit");
        }
        controlerObject.setData(inputs);
        var todoItemObject = controlerObject.getData()[controlerObject.getData().length - 1];
        viewObject.renderItem(todoItemObject);
        e.target.reset();
    };
    TodoView.prototype.onLoadFunc = function () {
        if (!localStorage.getItem("saved_data"))
            return false;
        modelObject.countOfIcons = 0;
        controlerObject.getData().forEach(function (item) { return viewObject.renderItem(item); });
    };
    TodoView.prototype.checkBoxFunc = function (boxCheck) {
        controlerObject.makeCheckBox(boxCheck);
        // console.log(setEvent.template);
        viewObject.template.textContent = "";
        viewObject.onLoadFunc();
    };
    TodoView.prototype.deletElemFunc = function (elemDel) {
        if (elemDel.target.className === 'taskButton') {
            controlerObject.deletElem(elemDel);
            viewObject.template.innerHTML = '';
            viewObject.onLoadFunc();
        }
    };
    TodoView.prototype.deletAllFunc = function (delAll) {
        console.log(delAll.target);
        if (delAll.target.className === 'del') {
            controlerObject.deletAllElem(delAll);
            viewObject.template.innerHTML = '';
        }
    };
    TodoView.prototype.createTemplate = function (titleText, descriptionText, completedText, checkboxTick, buttonText) {
        if (titleText === void 0) { titleText = ""; }
        if (descriptionText === void 0) { descriptionText = ""; }
        if (completedText === void 0) { completedText = ""; }
        if (checkboxTick === void 0) { checkboxTick = false; }
        if (buttonText === void 0) { buttonText = "Delete element"; }
        var mainWrp = document.createElement("div");
        mainWrp.className = "col-4";
        var wrp = document.createElement("div");
        wrp.className = "taskWrapper";
        // console.log(setEvent.num)
        wrp.id = modelObject.countOfIcons++;
        mainWrp.append(wrp);
        var title = document.createElement("div");
        title.innerHTML = titleText;
        title.className = "taskHeading";
        wrp.append(title);
        var description = document.createElement("div");
        description.innerHTML = descriptionText;
        description.className = "taskDescription";
        wrp.append(description);
        var completed = document.createElement("div");
        completed.innerHTML = completedText;
        completed.className = "taskCompleted";
        wrp.append(completed);
        var checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.checked = checkboxTick;
        checkbox.className = "taskCheckbox";
        wrp.append(checkbox);
        var button = document.createElement("button");
        button.innerHTML = buttonText;
        button.className = "taskButton";
        wrp.append(button);
        return mainWrp;
    };
    TodoView.prototype.renderItem = function (_a) {
        var title = _a.title, description = _a.description, completed = _a.completed, checkbox = _a.checkbox;
        var template = viewObject.createTemplate(title, description, completed, checkbox);
        var doItem = document.querySelector("#todoItems");
        doItem.prepend(template);
    };
    TodoView.prototype.creatDeleteAllButt = function (deleteAllText) {
        if (deleteAllText === void 0) { deleteAllText = 'Delete All'; }
        var deleteAll = document.createElement("button");
        var dellBut = document.querySelector("#todoForm");
        var spanOuter = document.createElement("span");
        var spanInner = document.createElement("span");
        deleteAll.append(spanOuter);
        spanOuter.append(spanInner);
        spanOuter.className = "buttonDel__text";
        spanInner.innerHTML = deleteAllText;
        spanInner.className = "del";
        deleteAll.className = "buttonDel";
        deleteAll.setAttribute('type', 'button');
        dellBut.append(deleteAll);
        console.log(deleteAll);
    };
    return TodoView;
}());
;
var controlerObject = new TodoController();
var viewObject = new TodoView();
var modelObject = new TodoModel();
// console.log(modelObject);
viewObject.setEvents();
viewObject.creatDeleteAllButt();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,